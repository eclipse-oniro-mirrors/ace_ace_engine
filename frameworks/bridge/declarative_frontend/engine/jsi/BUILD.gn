# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//ark/ts2abc/ts2panda/ts2abc_config.gni")
import("//build/ohos.gni")
import("//foundation/ace/ace_engine/ace_config.gni")
import("//foundation/ace/ace_engine/build/ace_gen_obj.gni")

base_output_path = get_label_info(":gen_abc_proxyclass", "target_out_dir")
abcproxyclass_obj_path = base_output_path + "/abc_proxy_class.o"
abcenumstyle_obj_path = base_output_path + "/abc_enum_style.o"
abccontentstorage_obj_path = base_output_path + "/abc_content_storage.o"

ts2abc_gen_abc("gen_stateMgmt_abc") {
  extra_visibility = [ ":*" ]  # Only targets in this file can depend on this.
  src_js = rebase_path(
          "//foundation/ace/ace_engine/frameworks/bridge/declarative_frontend/engine/stateMgmt.js")
  dst_file = rebase_path(base_output_path + "/stateMgmt.abc")

  in_puts = [ "//foundation/ace/ace_engine/frameworks/bridge/declarative_frontend/engine/stateMgmt.js" ]
  out_puts = [ base_output_path + "/stateMgmt.abc" ]
}

ts2abc_gen_abc("gen_jsEnumStyle_abc") {
  extra_visibility = [ ":*" ]  # Only targets in this file can depend on this.
  src_js = rebase_path(
          "//foundation/ace/ace_engine/frameworks/bridge/declarative_frontend/engine/jsEnumStyle.js")
  dst_file = rebase_path(base_output_path + "/jsEnumStyle.abc")

  in_puts = [ "//foundation/ace/ace_engine/frameworks/bridge/declarative_frontend/engine/jsEnumStyle.js" ]
  out_puts = [ base_output_path + "/jsEnumStyle.abc" ]
}

ts2abc_gen_abc("gen_contentStorage_abc") {
  extra_visibility = [ ":*" ]  # Only targets in this file can depend on this.
  src_js = rebase_path(
          "//foundation/ace/ace_engine/frameworks/bridge/declarative_frontend/engine/contentStorage.js")
  dst_file = rebase_path(base_output_path + "/contentStorage.abc")

  in_puts = [ "//foundation/ace/ace_engine/frameworks/bridge/declarative_frontend/engine/contentStorage.js" ]
  out_puts = [ base_output_path + "/contentStorage.abc" ]
}

gen_obj("abc_proxyclass") {
  input = base_output_path + "/stateMgmt.abc"
  if (use_mac) {
    abcproxyclass_obj_path = base_output_path + "/js_proxy_class.c"
  }
  output = abcproxyclass_obj_path
  snapshot_dep = [ ":gen_stateMgmt_abc" ]
}

gen_obj("abc_enum_style") {
  input = base_output_path + "/jsEnumStyle.abc"
  output = abcenumstyle_obj_path
  snapshot_dep = [ ":gen_jsEnumStyle_abc" ]
}

gen_obj("abc_contentStorage") {
  input = base_output_path + "/contentStorage.abc"
  output = abccontentstorage_obj_path
  snapshot_dep = [ ":gen_contentStorage_abc" ]
}

template("declarative_js_engine_ark") {
  forward_variables_from(invoker, "*")

  ohos_source_set(target_name) {
    defines += invoker.defines
    if (target_cpu == "arm64") {
      defines += [ "APP_USE_ARM64" ]
    } else if (target_cpu == "arm") {
      defines += [ "APP_USE_ARM" ]
    }

    configs = [
      "$ace_root:ace_config",
      "$ark_runtime_path/libpandabase:arkbase_public_config",
    ]

    public_configs = [ "//ark/js_runtime:ark_jsruntime_public_config" ]

    sources = [
      "ark/ark_js_runtime.cpp",
      "ark/ark_js_value.cpp",
      "content_storage_set.cpp",
      "js_converter.cpp",
      "jsi_declarative_engine.cpp",
      "jsi_declarative_group_js_bridge.cpp",
      "jsi_declarative_utils.cpp",
      "jsi_object_template.cpp",
      "jsi_types.cpp",
      "jsi_view_register.cpp",
      "modules/jsi_app_module.cpp",
      "modules/jsi_curves_module.cpp",
      "modules/jsi_matrix4_module.cpp",
      "modules/jsi_module_manager.cpp",
      "modules/jsi_router_module.cpp",
      "modules/jsi_timer_module.cpp",
    ]

    deps = [ "//ark/js_runtime:libark_jsruntime" ]

    # if napi support
    deps += [ "//foundation/ace/napi:ace_napi_ark" ]
    public_deps = [ "//foundation/ace/napi:ace_napi" ]

    deps += [
      ":gen_obj_src_abc_contentStorage",
      ":gen_obj_src_abc_enum_style",
      ":gen_obj_src_abc_proxyclass",
    ]

    deps += [ "//foundation/aafwk/standard/frameworks/kits/ability/native:abilitykit_native" ]

    external_deps = [ "aafwk_standard:ability_context_native" ]
  }
}

foreach(item, ace_platforms) {
  platform = item.name
  engine_config = {
  }
  engine_config = item.config
  support_engines = []
  support_engines = engine_config.js_engines
  foreach(engine, support_engines) {
    if (engine.engine_name == "ark") {
      declarative_js_engine_ark("declarative_js_engine_bridge_ark_$platform") {
        defines = engine.engine_defines
        config = {
        }

        if (defined(item.config)) {
          config = item.config
        }
        if (defined(config.defines)) {
          defines += config.defines
        }
      }
    }
  }
}
